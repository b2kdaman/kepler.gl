"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledLayerName = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../common/styled-components");

var _icons = require("../common/icons");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dataUtils = require("../../utils/data-utils");

var _tooltip = require("../../constants/tooltip");

var _defaultSettings = require("../../constants/default-settings");

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  & .row__delta-value {\n    text-align: right;\n\n    &.positive {\n      color: ", ";\n    }\n\n    &.negative {\n      color: ", ";\n    }\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 12px;\n  letter-spacing: 0.43px;\n  text-transform: capitalize;\n  padding: 0 14px;\n  margin-top: 12px;\n\n  svg {\n    margin-right: 4px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledLayerName = (0, _styledComponents["default"])(_styledComponents2.CenterFlexbox)(_templateObject(), function (props) {
  return props.theme.textColorHl;
});
exports.StyledLayerName = StyledLayerName;

var StyledTable = _styledComponents["default"].table(_templateObject2(), function (props) {
  return props.theme.primaryBtnBgd;
}, function (props) {
  return props.theme.negativeBtnActBgd;
});

var Row = function Row(_ref) {
  var name = _ref.name,
      value = _ref.value,
      deltaValue = _ref.deltaValue,
      url = _ref.url;

  // Set 'url' to 'value' if it looks like a url
  if (!url && value && typeof value === 'string' && value.match(/^http/)) {
    url = value;
  }

  var asImg = /<img>/.test(name);
  return _react["default"].createElement("tr", {
    className: "row",
    key: name
  }, _react["default"].createElement("td", {
    className: "row__name"
  }, name), _react["default"].createElement("td", {
    className: "row__value"
  }, asImg ? _react["default"].createElement("img", {
    src: value
  }) : url ? _react["default"].createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: url
  }, value) : value), (0, _dataUtils.notNullorUndefined)(deltaValue) && _react["default"].createElement("td", {
    className: "row__delta-value ".concat(deltaValue.toString().charAt(0) === '+' ? 'positive' : 'negative')
  }, deltaValue));
};

var EntryInfo = function EntryInfo(_ref2) {
  var fieldsToShow = _ref2.fieldsToShow,
      fields = _ref2.fields,
      data = _ref2.data,
      primaryData = _ref2.primaryData,
      compareType = _ref2.compareType;
  return _react["default"].createElement("tbody", null, fieldsToShow.map(function (item) {
    return _react["default"].createElement(EntryInfoRow, {
      key: item.name,
      item: item,
      fields: fields,
      data: data,
      primaryData: primaryData,
      compareType: compareType
    });
  }));
};

var EntryInfoRow = function EntryInfoRow(_ref3) {
  var item = _ref3.item,
      fields = _ref3.fields,
      data = _ref3.data,
      primaryData = _ref3.primaryData,
      compareType = _ref3.compareType;
  var field = fields.find(function (f) {
    return f.name === item.name;
  });

  if (!field) {
    return null;
  }

  var valueIdx = field.tableFieldIndex - 1;
  var displayValue = item.format ? (0, _dataUtils.getFormatter)(item.format, field)(data[valueIdx]) : (0, _dataUtils.parseFieldValue)(data[valueIdx], field.type);
  var displayDeltaValue = null;

  if (primaryData && (field.type === _defaultSettings.ALL_FIELD_TYPES.integer || field.type === _defaultSettings.ALL_FIELD_TYPES.real)) {
    var deltaValue = compareType === _tooltip.COMPARE_TYPES.PERCENTAGE ? data[valueIdx] / primaryData[valueIdx] - 1 : data[valueIdx] - primaryData[valueIdx];
    var deltaFormat = compareType === _tooltip.COMPARE_TYPES.PERCENTAGE ? _tooltip.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_tooltip.TOOLTIP_KEY] : _tooltip.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_tooltip.TOOLTIP_KEY];
    displayDeltaValue = (0, _dataUtils.getFormatter)(item.format || deltaFormat)(deltaValue);
    var deltaFirstChar = displayDeltaValue.toString().charAt(0);

    if (deltaFirstChar !== '+' && deltaFirstChar !== '-') {
      displayDeltaValue = "+".concat(displayDeltaValue);
    }
  }

  return _react["default"].createElement(Row, {
    name: item.name,
    value: displayValue,
    deltaValue: displayDeltaValue
  });
};

var CellInfo = function CellInfo(_ref4) {
  var data = _ref4.data,
      layer = _ref4.layer;
  var _layer$config = layer.config,
      colorField = _layer$config.colorField,
      sizeField = _layer$config.sizeField;
  return _react["default"].createElement("tbody", null, _react["default"].createElement(Row, {
    name: 'total points',
    key: "count",
    value: data.points && data.points.length
  }), colorField && layer.visualChannels.color ? _react["default"].createElement(Row, {
    name: layer.getVisualChannelDescription('color').measure,
    key: "color",
    value: data.colorValue || 'N/A'
  }) : null, sizeField && layer.visualChannels.size ? _react["default"].createElement(Row, {
    name: layer.getVisualChannelDescription('size').measure,
    key: "size",
    value: data.elevationValue || 'N/A'
  }) : null);
};

var LayerHoverInfoFactory = function LayerHoverInfoFactory() {
  var LayerHoverInfo = function LayerHoverInfo(props) {
    var data = props.data,
        layer = props.layer;

    if (!data || !layer) {
      return null;
    }

    return _react["default"].createElement("div", {
      className: "map-popover__layer-info"
    }, _react["default"].createElement(StyledLayerName, {
      className: "map-popover__layer-name"
    }, _react["default"].createElement(_icons.Layers, {
      height: "12px"
    }), props.layer.config.label), _react["default"].createElement(StyledTable, null, props.layer.isAggregated ? _react["default"].createElement(CellInfo, props) : _react["default"].createElement(EntryInfo, props)));
  };

  LayerHoverInfo.propTypes = {
    fields: _propTypes["default"].arrayOf(_propTypes["default"].any),
    fieldsToShow: _propTypes["default"].arrayOf(_propTypes["default"].any),
    layer: _propTypes["default"].object,
    data: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].any), _propTypes["default"].object])
  };
  return LayerHoverInfo;
};

var _default = LayerHoverInfoFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21hcC9sYXllci1ob3Zlci1pbmZvLmpzIl0sIm5hbWVzIjpbIlN0eWxlZExheWVyTmFtZSIsIkNlbnRlckZsZXhib3giLCJwcm9wcyIsInRoZW1lIiwidGV4dENvbG9ySGwiLCJTdHlsZWRUYWJsZSIsInN0eWxlZCIsInRhYmxlIiwicHJpbWFyeUJ0bkJnZCIsIm5lZ2F0aXZlQnRuQWN0QmdkIiwiUm93IiwibmFtZSIsInZhbHVlIiwiZGVsdGFWYWx1ZSIsInVybCIsIm1hdGNoIiwiYXNJbWciLCJ0ZXN0IiwidG9TdHJpbmciLCJjaGFyQXQiLCJFbnRyeUluZm8iLCJmaWVsZHNUb1Nob3ciLCJmaWVsZHMiLCJkYXRhIiwicHJpbWFyeURhdGEiLCJjb21wYXJlVHlwZSIsIm1hcCIsIml0ZW0iLCJFbnRyeUluZm9Sb3ciLCJmaWVsZCIsImZpbmQiLCJmIiwidmFsdWVJZHgiLCJ0YWJsZUZpZWxkSW5kZXgiLCJkaXNwbGF5VmFsdWUiLCJmb3JtYXQiLCJ0eXBlIiwiZGlzcGxheURlbHRhVmFsdWUiLCJBTExfRklFTERfVFlQRVMiLCJpbnRlZ2VyIiwicmVhbCIsIkNPTVBBUkVfVFlQRVMiLCJQRVJDRU5UQUdFIiwiZGVsdGFGb3JtYXQiLCJUT09MVElQX0ZPUk1BVFMiLCJERUNJTUFMX1BFUkNFTlRfRlVMTF8yIiwiVE9PTFRJUF9LRVkiLCJERUNJTUFMX0RFQ0lNQUxfRklYRURfMyIsImRlbHRhRmlyc3RDaGFyIiwiQ2VsbEluZm8iLCJsYXllciIsImNvbmZpZyIsImNvbG9yRmllbGQiLCJzaXplRmllbGQiLCJwb2ludHMiLCJsZW5ndGgiLCJ2aXN1YWxDaGFubmVscyIsImNvbG9yIiwiZ2V0VmlzdWFsQ2hhbm5lbERlc2NyaXB0aW9uIiwibWVhc3VyZSIsImNvbG9yVmFsdWUiLCJzaXplIiwiZWxldmF0aW9uVmFsdWUiLCJMYXllckhvdmVySW5mb0ZhY3RvcnkiLCJMYXllckhvdmVySW5mbyIsImxhYmVsIiwiaXNBZ2dyZWdhdGVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsImFueSIsIm9iamVjdCIsIm9uZU9mVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFTyxJQUFNQSxlQUFlLEdBQUcsa0NBQU9DLGdDQUFQLENBQUgsb0JBQ2pCLFVBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUMsV0FBaEI7QUFBQSxDQURZLENBQXJCOzs7QUFhUCxJQUFNQyxXQUFXLEdBQUdDLDZCQUFPQyxLQUFWLHFCQUtGLFVBQUFMLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUssYUFBaEI7QUFBQSxDQUxILEVBU0YsVUFBQU4sS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0MsS0FBTixDQUFZTSxpQkFBaEI7QUFBQSxDQVRILENBQWpCOztBQWNBLElBQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLE9BQW9DO0FBQUEsTUFBbENDLElBQWtDLFFBQWxDQSxJQUFrQztBQUFBLE1BQTVCQyxLQUE0QixRQUE1QkEsS0FBNEI7QUFBQSxNQUFyQkMsVUFBcUIsUUFBckJBLFVBQXFCO0FBQUEsTUFBVEMsR0FBUyxRQUFUQSxHQUFTOztBQUM5QztBQUNBLE1BQUksQ0FBQ0EsR0FBRCxJQUFRRixLQUFSLElBQWlCLE9BQU9BLEtBQVAsS0FBaUIsUUFBbEMsSUFBOENBLEtBQUssQ0FBQ0csS0FBTixDQUFZLE9BQVosQ0FBbEQsRUFBd0U7QUFDdEVELElBQUFBLEdBQUcsR0FBR0YsS0FBTjtBQUNEOztBQUVELE1BQU1JLEtBQUssR0FBRyxRQUFRQyxJQUFSLENBQWFOLElBQWIsQ0FBZDtBQUNBLFNBQ0U7QUFBSSxJQUFBLFNBQVMsRUFBQyxLQUFkO0FBQW9CLElBQUEsR0FBRyxFQUFFQTtBQUF6QixLQUNFO0FBQUksSUFBQSxTQUFTLEVBQUM7QUFBZCxL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QUFxRCxnQ0FBQyxTQUFELEVBQWVBLEtBQWYsQ0FEeEQsQ0FMRixDQURGO0FBV0QsR0FsQkQ7O0FBb0JBOEQsRUFBQUEsY0FBYyxDQUFDRyxTQUFmLEdBQTJCO0FBQ3pCN0MsSUFBQUEsTUFBTSxFQUFFOEMsc0JBQVVDLE9BQVYsQ0FBa0JELHNCQUFVRSxHQUE1QixDQURpQjtBQUV6QmpELElBQUFBLFlBQVksRUFBRStDLHNCQUFVQyxPQUFWLENBQWtCRCxzQkFBVUUsR0FBNUIsQ0FGVztBQUd6QnBCLElBQUFBLEtBQUssRUFBRWtCLHNCQUFVRyxNQUhRO0FBSXpCaEQsSUFBQUEsSUFBSSxFQUFFNkMsc0JBQVVJLFNBQVYsQ0FBb0IsQ0FBQ0osc0JBQVVDLE9BQVYsQ0FBa0JELHNCQUFVRSxHQUE1QixDQUFELEVBQW1DRixzQkFBVUcsTUFBN0MsQ0FBcEI7QUFKbUIsR0FBM0I7QUFNQSxTQUFPUCxjQUFQO0FBQ0QsQ0E1QkQ7O2VBOEJlRCxxQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7Q2VudGVyRmxleGJveH0gZnJvbSAnY29tcG9uZW50cy9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtMYXllcnN9IGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL2ljb25zJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge3BhcnNlRmllbGRWYWx1ZSwgZ2V0Rm9ybWF0dGVyLCBub3ROdWxsb3JVbmRlZmluZWR9IGZyb20gJ3V0aWxzL2RhdGEtdXRpbHMnO1xuaW1wb3J0IHtUT09MVElQX0ZPUk1BVFMsIFRPT0xUSVBfS0VZLCBDT01QQVJFX1RZUEVTfSBmcm9tICdjb25zdGFudHMvdG9vbHRpcCc7XG5pbXBvcnQge0FMTF9GSUVMRF9UWVBFU30gZnJvbSAnY29uc3RhbnRzL2RlZmF1bHQtc2V0dGluZ3MnO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkTGF5ZXJOYW1lID0gc3R5bGVkKENlbnRlckZsZXhib3gpYFxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS50ZXh0Q29sb3JIbH07XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNDNweDtcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIHBhZGRpbmc6IDAgMTRweDtcbiAgbWFyZ2luLXRvcDogMTJweDtcblxuICBzdmcge1xuICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRUYWJsZSA9IHN0eWxlZC50YWJsZWBcbiAgJiAucm93X19kZWx0YS12YWx1ZSB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG5cbiAgICAmLnBvc2l0aXZlIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnByaW1hcnlCdG5CZ2R9O1xuICAgIH1cblxuICAgICYubmVnYXRpdmUge1xuICAgICAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUubmVnYXRpdmVCdG5BY3RCZ2R9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgUm93ID0gKHtuYW1lLCB2YWx1ZSwgZGVsdGFWYWx1ZSwgdXJsfSkgPT4ge1xuICAvLyBTZXQgJ3VybCcgdG8gJ3ZhbHVlJyBpZiBpdCBsb29rcyBsaWtlIGEgdXJsXG4gIGlmICghdXJsICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2goL15odHRwLykpIHtcbiAgICB1cmwgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGFzSW1nID0gLzxpbWc+Ly50ZXN0KG5hbWUpO1xuICByZXR1cm4gKFxuICAgIDx0ciBjbGFzc05hbWU9XCJyb3dcIiBrZXk9e25hbWV9PlxuICAgICAgPHRkIGNsYXNzTmFtZT1cInJvd19fbmFtZVwiPntuYW1lfTwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPVwicm93X192YWx1ZVwiPlxuICAgICAgICB7YXNJbWcgPyAoXG4gICAgICAgICAgPGltZyBzcmM9e3ZhbHVlfSAvPlxuICAgICAgICApIDogdXJsID8gKFxuICAgICAgICAgIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICApfVxuICAgICAgPC90ZD5cbiAgICAgIHtub3ROdWxsb3JVbmRlZmluZWQoZGVsdGFWYWx1ZSkgJiYgKFxuICAgICAgICA8dGRcbiAgICAgICAgICBjbGFzc05hbWU9e2Byb3dfX2RlbHRhLXZhbHVlICR7XG4gICAgICAgICAgICBkZWx0YVZhbHVlLnRvU3RyaW5nKCkuY2hhckF0KDApID09PSAnKycgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ1xuICAgICAgICAgIH1gfVxuICAgICAgICA+XG4gICAgICAgICAge2RlbHRhVmFsdWV9XG4gICAgICAgIDwvdGQ+XG4gICAgICApfVxuICAgIDwvdHI+XG4gICk7XG59O1xuXG5jb25zdCBFbnRyeUluZm8gPSAoe2ZpZWxkc1RvU2hvdywgZmllbGRzLCBkYXRhLCBwcmltYXJ5RGF0YSwgY29tcGFyZVR5cGV9KSA9PiAoXG4gIDx0Ym9keT5cbiAgICB7ZmllbGRzVG9TaG93Lm1hcChpdGVtID0+IChcbiAgICAgIDxFbnRyeUluZm9Sb3dcbiAgICAgICAga2V5PXtpdGVtLm5hbWV9XG4gICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICBkYXRhPXtkYXRhfVxuICAgICAgICBwcmltYXJ5RGF0YT17cHJpbWFyeURhdGF9XG4gICAgICAgIGNvbXBhcmVUeXBlPXtjb21wYXJlVHlwZX1cbiAgICAgIC8+XG4gICAgKSl9XG4gIDwvdGJvZHk+XG4pO1xuXG5jb25zdCBFbnRyeUluZm9Sb3cgPSAoe2l0ZW0sIGZpZWxkcywgZGF0YSwgcHJpbWFyeURhdGEsIGNvbXBhcmVUeXBlfSkgPT4ge1xuICBjb25zdCBmaWVsZCA9IGZpZWxkcy5maW5kKGYgPT4gZi5uYW1lID09PSBpdGVtLm5hbWUpO1xuICBpZiAoIWZpZWxkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB2YWx1ZUlkeCA9IGZpZWxkLnRhYmxlRmllbGRJbmRleCAtIDE7XG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IGl0ZW0uZm9ybWF0XG4gICAgPyBnZXRGb3JtYXR0ZXIoaXRlbS5mb3JtYXQsIGZpZWxkKShkYXRhW3ZhbHVlSWR4XSlcbiAgICA6IHBhcnNlRmllbGRWYWx1ZShkYXRhW3ZhbHVlSWR4XSwgZmllbGQudHlwZSk7XG4gIGxldCBkaXNwbGF5RGVsdGFWYWx1ZSA9IG51bGw7XG4gIGlmIChcbiAgICBwcmltYXJ5RGF0YSAmJlxuICAgIChmaWVsZC50eXBlID09PSBBTExfRklFTERfVFlQRVMuaW50ZWdlciB8fCBmaWVsZC50eXBlID09PSBBTExfRklFTERfVFlQRVMucmVhbClcbiAgKSB7XG4gICAgY29uc3QgZGVsdGFWYWx1ZSA9XG4gICAgICBjb21wYXJlVHlwZSA9PT0gQ09NUEFSRV9UWVBFUy5QRVJDRU5UQUdFXG4gICAgICAgID8gZGF0YVt2YWx1ZUlkeF0gLyBwcmltYXJ5RGF0YVt2YWx1ZUlkeF0gLSAxXG4gICAgICAgIDogZGF0YVt2YWx1ZUlkeF0gLSBwcmltYXJ5RGF0YVt2YWx1ZUlkeF07XG4gICAgY29uc3QgZGVsdGFGb3JtYXQgPVxuICAgICAgY29tcGFyZVR5cGUgPT09IENPTVBBUkVfVFlQRVMuUEVSQ0VOVEFHRVxuICAgICAgICA/IFRPT0xUSVBfRk9STUFUUy5ERUNJTUFMX1BFUkNFTlRfRlVMTF8yW1RPT0xUSVBfS0VZXVxuICAgICAgICA6IFRPT0xUSVBfRk9STUFUUy5ERUNJTUFMX0RFQ0lNQUxfRklYRURfM1tUT09MVElQX0tFWV07XG4gICAgZGlzcGxheURlbHRhVmFsdWUgPSBnZXRGb3JtYXR0ZXIoaXRlbS5mb3JtYXQgfHwgZGVsdGFGb3JtYXQpKGRlbHRhVmFsdWUpO1xuICAgIGNvbnN0IGRlbHRhRmlyc3RDaGFyID0gZGlzcGxheURlbHRhVmFsdWUudG9TdHJpbmcoKS5jaGFyQXQoMCk7XG4gICAgaWYgKGRlbHRhRmlyc3RDaGFyICE9PSAnKycgJiYgZGVsdGFGaXJzdENoYXIgIT09ICctJykge1xuICAgICAgZGlzcGxheURlbHRhVmFsdWUgPSBgKyR7ZGlzcGxheURlbHRhVmFsdWV9YDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gPFJvdyBuYW1lPXtpdGVtLm5hbWV9IHZhbHVlPXtkaXNwbGF5VmFsdWV9IGRlbHRhVmFsdWU9e2Rpc3BsYXlEZWx0YVZhbHVlfSAvPjtcbn07XG5cbmNvbnN0IENlbGxJbmZvID0gKHtkYXRhLCBsYXllcn0pID0+IHtcbiAgY29uc3Qge2NvbG9yRmllbGQsIHNpemVGaWVsZH0gPSBsYXllci5jb25maWc7XG5cbiAgcmV0dXJuIChcbiAgICA8dGJvZHk+XG4gICAgICA8Um93IG5hbWU9eyd0b3RhbCBwb2ludHMnfSBrZXk9XCJjb3VudFwiIHZhbHVlPXtkYXRhLnBvaW50cyAmJiBkYXRhLnBvaW50cy5sZW5ndGh9IC8+XG4gICAgICB7Y29sb3JGaWVsZCAmJiBsYXllci52aXN1YWxDaGFubmVscy5jb2xvciA/IChcbiAgICAgICAgPFJvd1xuICAgICAgICAgIG5hbWU9e2xheWVyLmdldFZpc3VhbENoYW5uZWxEZXNjcmlwdGlvbignY29sb3InKS5tZWFzdXJlfVxuICAgICAgICAgIGtleT1cImNvbG9yXCJcbiAgICAgICAgICB2YWx1ZT17ZGF0YS5jb2xvclZhbHVlIHx8ICdOL0EnfVxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgICB7c2l6ZUZpZWxkICYmIGxheWVyLnZpc3VhbENoYW5uZWxzLnNpemUgPyAoXG4gICAgICAgIDxSb3dcbiAgICAgICAgICBuYW1lPXtsYXllci5nZXRWaXN1YWxDaGFubmVsRGVzY3JpcHRpb24oJ3NpemUnKS5tZWFzdXJlfVxuICAgICAgICAgIGtleT1cInNpemVcIlxuICAgICAgICAgIHZhbHVlPXtkYXRhLmVsZXZhdGlvblZhbHVlIHx8ICdOL0EnfVxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgPC90Ym9keT5cbiAgKTtcbn07XG5cbmNvbnN0IExheWVySG92ZXJJbmZvRmFjdG9yeSA9ICgpID0+IHtcbiAgY29uc3QgTGF5ZXJIb3ZlckluZm8gPSBwcm9wcyA9PiB7XG4gICAgY29uc3Qge2RhdGEsIGxheWVyfSA9IHByb3BzO1xuXG4gICAgaWYgKCFkYXRhIHx8ICFsYXllcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFwLXBvcG92ZXJfX2xheWVyLWluZm9cIj5cbiAgICAgICAgPFN0eWxlZExheWVyTmFtZSBjbGFzc05hbWU9XCJtYXAtcG9wb3Zlcl9fbGF5ZXItbmFtZVwiPlxuICAgICAgICAgIDxMYXllcnMgaGVpZ2h0PVwiMTJweFwiIC8+XG4gICAgICAgICAge3Byb3BzLmxheWVyLmNvbmZpZy5sYWJlbH1cbiAgICAgICAgPC9TdHlsZWRMYXllck5hbWU+XG4gICAgICAgIDxTdHlsZWRUYWJsZT5cbiAgICAgICAgICB7cHJvcHMubGF5ZXIuaXNBZ2dyZWdhdGVkID8gPENlbGxJbmZvIHsuLi5wcm9wc30gLz4gOiA8RW50cnlJbmZvIHsuLi5wcm9wc30gLz59XG4gICAgICAgIDwvU3R5bGVkVGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIExheWVySG92ZXJJbmZvLnByb3BUeXBlcyA9IHtcbiAgICBmaWVsZHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpLFxuICAgIGZpZWxkc1RvU2hvdzogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmFueSksXG4gICAgbGF5ZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZGF0YTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmFueSksIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuICByZXR1cm4gTGF5ZXJIb3ZlckluZm87XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMYXllckhvdmVySW5mb0ZhY3Rvcnk7XG4iXX0=