"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultInteraction = getDefaultInteraction;
exports.findFieldsToShow = findFieldsToShow;
exports.BRUSH_CONFIG = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaultSettings = require("../constants/default-settings");

var _icons = require("../components/common/icons");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * @type {typeof import('./interaction-utils').getDefaultInteraction}
 */
function getDefaultInteraction() {
  return {
    tooltip: {
      id: 'tooltip',
      label: 'interactions.tooltip',
      enabled: true,
      iconComponent: _icons.Messages,
      config: {
        fieldsToShow: {},
        compareMode: false,
        compareType: 'absolute'
      }
    },
    geocoder: {
      id: 'geocoder',
      label: 'interactions.geocoder',
      enabled: false,
      iconComponent: _icons.Pin,
      position: null
    },
    brush: {
      id: 'brush',
      label: 'interactions.brush',
      enabled: false,
      iconComponent: _icons.Crosshairs,
      config: {
        // size is in km
        size: 0.5
      }
    },
    coordinate: {
      id: 'coordinate',
      label: 'interactions.coordinate',
      enabled: false,
      iconComponent: _icons.CursorClick,
      position: null
    }
  };
}

var BRUSH_CONFIG = {
  range: [0, 50]
};
/**
 * @type {typeof import('./interaction-utils').findFieldsToShow}
 */

exports.BRUSH_CONFIG = BRUSH_CONFIG;

function findFieldsToShow(_ref) {
  var fields = _ref.fields,
      id = _ref.id;

  // first find default tooltip fields for trips
  var fieldsToShow = _defaultSettings.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {
    if (fields.find(function (_ref2) {
      var name = _ref2.name;
      return curr.name === name;
    })) {
      prev.push(curr);
    }

    return prev;
  }, []);

  return (0, _defineProperty2["default"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields));
}

function autoFindTooltipFields(fields) {
  var ptFields = _mergeFieldPairs(_defaultSettings.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry


  var fieldsToShow = fields.filter(function (_ref4) {
    var name = _ref4.name,
        type = _ref4.type;
    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {
      return !ptFields.includes(seg);
    }) && type !== _defaultSettings.ALL_FIELD_TYPES.geojson && type !== 'object';
  });
  return fieldsToShow.slice(0, _defaultSettings.MAX_DEFAULT_TOOLTIPS).map(function (_ref5) {
    var name = _ref5.name;
    return {
      name: name,
      format: null
    };
  });
}

function _mergeFieldPairs(pairs) {
  return pairs.reduce(function (prev, pair) {
    return [].concat((0, _toConsumableArray2["default"])(prev), (0, _toConsumableArray2["default"])(pair));
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbnRlcmFjdGlvbi11dGlscy5qcyJdLCJuYW1lcyI6WyJnZXREZWZhdWx0SW50ZXJhY3Rpb24iLCJ0b29sdGlwIiwiaWQiLCJsYWJlbCIsImVuYWJsZWQiLCJpY29uQ29tcG9uZW50IiwiTWVzc2FnZXMiLCJjb25maWciLCJmaWVsZHNUb1Nob3ciLCJjb21wYXJlTW9kZSIsImNvbXBhcmVUeXBlIiwiZ2VvY29kZXIiLCJQaW4iLCJwb3NpdGlvbiIsImJydXNoIiwiQ3Jvc3NoYWlycyIsInNpemUiLCJjb29yZGluYXRlIiwiQ3Vyc29yQ2xpY2siLCJCUlVTSF9DT05GSUciLCJyYW5nZSIsImZpbmRGaWVsZHNUb1Nob3ciLCJmaWVsZHMiLCJERUZBVUxUX1RPT0xUSVBfRklFTERTIiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJmaW5kIiwibmFtZSIsInB1c2giLCJsZW5ndGgiLCJhdXRvRmluZFRvb2x0aXBGaWVsZHMiLCJwdEZpZWxkcyIsIl9tZXJnZUZpZWxkUGFpcnMiLCJUUklQX1BPSU5UX0ZJRUxEUyIsImZpbHRlciIsInR5cGUiLCJyZXBsYWNlIiwidHJpbSIsInNwbGl0IiwiZXZlcnkiLCJzZWciLCJpbmNsdWRlcyIsIkFMTF9GSUVMRF9UWVBFUyIsImdlb2pzb24iLCJzbGljZSIsIk1BWF9ERUZBVUxUX1RPT0xUSVBTIiwibWFwIiwiZm9ybWF0IiwicGFpcnMiLCJwYWlyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBTUE7O0FBMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVVBOzs7QUFHTyxTQUFTQSxxQkFBVCxHQUFpQztBQUN0QyxTQUFPO0FBQ0xDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxFQUFFLEVBQUUsU0FERztBQUVQQyxNQUFBQSxLQUFLLEVBQUUs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QUFVO0FBQ2pFLFdBQU87QUFDTEEsTUFBQUEsSUFBSSxFQUFKQSxJQURLO0FBRUxvQixNQUFBQSxNQUFNLEVBQUU7QUFGSCxLQUFQO0FBSUQsR0FMTSxDQUFQO0FBTUQ7O0FBRUQsU0FBU2YsZ0JBQVQsQ0FBMEJnQixLQUExQixFQUFpQztBQUMvQixTQUFPQSxLQUFLLENBQUN6QixNQUFOLENBQWEsVUFBQ0MsSUFBRCxFQUFPeUIsSUFBUDtBQUFBLHlEQUFvQnpCLElBQXBCLHVDQUE2QnlCLElBQTdCO0FBQUEsR0FBYixFQUFpRCxFQUFqRCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge1xuICBERUZBVUxUX1RPT0xUSVBfRklFTERTLFxuICBNQVhfREVGQVVMVF9UT09MVElQUyxcbiAgQUxMX0ZJRUxEX1RZUEVTLFxuICBUUklQX1BPSU5UX0ZJRUxEU1xufSBmcm9tICdjb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XG5pbXBvcnQge01lc3NhZ2VzLCBDcm9zc2hhaXJzLCBDdXJzb3JDbGljaywgUGlufSBmcm9tICdjb21wb25lbnRzL2NvbW1vbi9pY29ucy9pbmRleCc7XG5cbi8qKlxuICogQHR5cGUge3R5cGVvZiBpbXBvcnQoJy4vaW50ZXJhY3Rpb24tdXRpbHMnKS5nZXREZWZhdWx0SW50ZXJhY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0SW50ZXJhY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgaWQ6ICd0b29sdGlwJyxcbiAgICAgIGxhYmVsOiAnaW50ZXJhY3Rpb25zLnRvb2x0aXAnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIGljb25Db21wb25lbnQ6IE1lc3NhZ2VzLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIGZpZWxkc1RvU2hvdzoge30sXG4gICAgICAgIGNvbXBhcmVNb2RlOiBmYWxzZSxcbiAgICAgICAgY29tcGFyZVR5cGU6ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGdlb2NvZGVyOiB7XG4gICAgICBpZDogJ2dlb2NvZGVyJyxcbiAgICAgIGxhYmVsOiAnaW50ZXJhY3Rpb25zLmdlb2NvZGVyJyxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgaWNvbkNvbXBvbmVudDogUGluLFxuICAgICAgcG9zaXRpb246IG51bGxcbiAgICB9LFxuICAgIGJydXNoOiB7XG4gICAgICBpZDogJ2JydXNoJyxcbiAgICAgIGxhYmVsOiAnaW50ZXJhY3Rpb25zLmJydXNoJyxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgaWNvbkNvbXBvbmVudDogQ3Jvc3NoYWlycyxcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICAvLyBzaXplIGlzIGluIGttXG4gICAgICAgIHNpemU6IDAuNVxuICAgICAgfVxuICAgIH0sXG4gICAgY29vcmRpbmF0ZToge1xuICAgICAgaWQ6ICdjb29yZGluYXRlJyxcbiAgICAgIGxhYmVsOiAnaW50ZXJhY3Rpb25zLmNvb3JkaW5hdGUnLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBpY29uQ29tcG9uZW50OiBDdXJzb3JDbGljayxcbiAgICAgIHBvc2l0aW9uOiBudWxsXG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgQlJVU0hfQ09ORklHID0ge1xuICByYW5nZTogWzAsIDUwXVxufTtcblxuLyoqXG4gKiBAdHlwZSB7dHlwZW9mIGltcG9ydCgnLi9pbnRlcmFjdGlvbi11dGlscycpLmZpbmRGaWVsZHNUb1Nob3d9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmllbGRzVG9TaG93KHtmaWVsZHMsIGlkfSkge1xuICAvLyBmaXJzdCBmaW5kIGRlZmF1bHQgdG9vbHRpcCBmaWVsZHMgZm9yIHRyaXBzXG4gIGNvbnN0IGZpZWxkc1RvU2hvdyA9IERFRkFVTFRfVE9PTFRJUF9GSUVMRFMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgaWYgKGZpZWxkcy5maW5kKCh7bmFtZX0pID0+IGN1cnIubmFtZSA9PT0gbmFtZSkpIHtcbiAgICAgIHByZXYucHVzaChjdXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIFtpZF06IGZpZWxkc1RvU2hvdy5sZW5ndGggPyBmaWVsZHNUb1Nob3cgOiBhdXRvRmluZFRvb2x0aXBGaWVsZHMoZmllbGRzKVxuICB9O1xufVxuXG5mdW5jdGlvbiBhdXRvRmluZFRvb2x0aXBGaWVsZHMoZmllbGRzKSB7XG4gIGNvbnN0IHB0RmllbGRzID0gX21lcmdlRmllbGRQYWlycyhUUklQX1BPSU5UX0ZJRUxEUyk7XG4gIC8vIGZpbHRlciBvdXQgdGhlIGRlZmF1bHQgZmllbGRzIHRoYXQgY29udGFpbnMgbGF0IGFuZCBsbmcgYW5kIGFueSBnZW9tZXRyeVxuICBjb25zdCBmaWVsZHNUb1Nob3cgPSBmaWVsZHMuZmlsdGVyKFxuICAgICh7bmFtZSwgdHlwZX0pID0+XG4gICAgICBuYW1lXG4gICAgICAgIC5yZXBsYWNlKC9bXywuXSsvZywgJyAnKVxuICAgICAgICAudHJpbSgpXG4gICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgIC5ldmVyeShzZWcgPT4gIXB0RmllbGRzLmluY2x1ZGVzKHNlZykpICYmXG4gICAgICB0eXBlICE9PSBBTExfRklFTERfVFlQRVMuZ2VvanNvbiAmJlxuICAgICAgdHlwZSAhPT0gJ29iamVjdCdcbiAgKTtcblxuICByZXR1cm4gZmllbGRzVG9TaG93LnNsaWNlKDAsIE1BWF9ERUZBVUxUX1RPT0xUSVBTKS5tYXAoKHtuYW1lfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lLFxuICAgICAgZm9ybWF0OiBudWxsXG4gICAgfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF9tZXJnZUZpZWxkUGFpcnMocGFpcnMpIHtcbiAgcmV0dXJuIHBhaXJzLnJlZHVjZSgocHJldiwgcGFpcikgPT4gWy4uLnByZXYsIC4uLnBhaXJdLCBbXSk7XG59XG4iXX0=